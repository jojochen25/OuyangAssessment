---
title: "R Data Manipulation Take Home Quiz"
format:
  html:
    theme: cosmo
    html-math-method: katex
    self-contained: true
execute:
  echo: true
  warning: false
  message: false
---

```{r, include=FALSE}
library(ggplot2)
library(dplyr)
library(stringr)
```


```{r}
data <- read.table("NEJM-withCOVID.txt")
str(data)
```

1. Plot a histogram showing the number of articles published per month, with fill color determined by whether there are more than 2 authors

```{r}
df <- data |>
  select(Month, numAuthor) |>
  group_by(Month) |>
  count(numAuthor > 2)
```

```{r, include=TRUE}
ggplot(df, aes(x = factor(Month), y = n, fill = `numAuthor > 2`)) +
  geom_bar(stat = "identity") +
  labs(x = "Month", y = "count", fill = "numAuthor > 2")
```


2. Plot a histogram showing the number of articles published per month and year, with fill color determined by whether there are more than 2 authors

```{r}
df_2 <- data |>
  select(Month, Year, numAuthor) |>
  group_by(Year, Month) |>
  count(numAuthor > 2) |>
  mutate(`Month-Year` = paste(Month, Year, sep="-")) # make a new month-year variable

# converting to date format
df_2$`Month-Year` <- as.Date(paste(df_2$Year, df_2$Month, "01", sep = "-"))

```

```{r}
ggplot(df_2, aes(x = `Month-Year`, y = n, fill = `numAuthor > 2`)) + # set up the axes, color fill by numAuthor > 2 column
  geom_bar(stat = "identity") + # plot the bars
  scale_x_date(date_breaks = "2 year", date_labels = "%Y") +  # show bi-yearly breaks
  labs(x = "Month-Year", y = "count", fill = "numAuthor > 2") 
```

```{r}
# ggplot(df_2, aes(x = factor(Month-Year), y = n, fill = `numAuthor > 2`)) +
#   geom_bar(stat = "identity") +
#   labs(x = "Month", y = "count", fill = "numAuthor > 2") +
#   theme_minimal()
```

3. The first names need to be cleaned, they often include the first initial as well. Remove the initials and plot out the most common first names (with more than 30 mentions) in ascending order.

```{r}
# \\b[A-Z](\\.|\\s)?\\b|\\s\\w+$
#   \\b: Word boundary to match standalone letters.
# [A-Z]: Matches a single capital letter.
# (\\.|\\s)?: Matches an optional period or space after the capital letter (e.g., for cases like "L." or "L").
# \\b: Another word boundary to ensure we only remove standalone uppercase letters and not part of actual names.
# \\s\\w+$: Removes any word (sequence of word characters) after the first space (i.e., removes the last name after the first name

# questions: do we count "J Brian Byrd" as Brian? 
# if J Brian Byrd doesn't count as Brian and counts as "J" for first name
# do gsub("(?<=\\s)[A-Z](\\.|\\s)?\\b|\\s\\w+$", "", firstAuthorF, perl = TRUE)

freq_firstName<-data |>
  select(firstAuthorF) |>
  mutate(firstAuthorRem=gsub("(?<=\\s)[A-Z](\\.|\\s)?\\b|\\s\\w+$", "", firstAuthorF, perl = TRUE)) |>
  mutate(firstAuthorRem=str_trim(firstAuthorRem)) |> # removes leading and trailing spaces
  count(firstAuthorRem) |>
  filter(n>30 & !is.na(firstAuthorRem)) |>
  arrange(n)
  
ggplot(freq_firstName, aes(x = reorder(firstAuthorRem, n), y = n)) +
  geom_point() +
  labs(x = "reorder(Var1, Freq)", y = "Freq") +
  theme(axis.text.x = element_text(angle = 90, hjust = 1)) # arrange names in vertical format
  
```

3. Plot a histogram where the fill is by whether it is the first instance of that first name (Red) or if it has been shown before (Blue). For example, if the first month authors are (Albert, Ben, Carl, David), then all four will be Red, but if the second month authors are (Albert, Ben, Ed, Frank) then half will be Red (Ed and Frank are new) and half will be Blue (Albert and Ben are old).

GO BACK ON THIS --if C Nicholas is first name, do we remove C

```{r}
# remove NA's
# \\b[A-Z](\\.|\\s)?\\b|\\s\\w+ converts H Cody to Cody OR (?<=\\s)[A-Z](\\.|\\s)?\\b|\\s\\w+$ treats it as H
# Catarina Cardoso--is this Catarina
# R in RÃ©mi was removed due to the special character using  \\b[A-Z](\\.|\\s)?\\b|\\s\\w+
# if C Nicholas is first name, do we remove C
# if we remove nicholas, has to be \\b[A-Z](?=\\s)[\\s]?

# maybe it is the first name (uncleaned)
num3_df <- data |>
  select(Month, Year, firstAuthorF) |>
  mutate(date = paste(Month, Year, sep="-")) |>
  mutate(date = as.Date(paste(Year, Month, "01", sep = "-"))) |>
  mutate(firstAuthorRem=gsub("(?<=\\s)[A-Z](\\.|\\s)?\\b|\\s\\w+$", "", firstAuthorF, perl = TRUE)) |>
  mutate(firstAuthorRem=str_trim(firstAuthorRem)) |>
  select(firstAuthorRem, date) |> # did not select firstAuthorF, 
  arrange(date) |>
  filter(!is.na(firstAuthorRem)) |>
  group_by(firstAuthorRem) |>
  distinct(firstAuthorRem, date, .keep_all = TRUE) |>
  mutate(firstpresentation = !duplicated(firstAuthorRem)) |>
  ungroup() |>
  filter(date>="2015-01-01" & date <= "2020-07-01") 

ggplot(num3_df, aes(x = as.factor(date), fill=firstpresentation)) +
  geom_bar(position="fill") +
  theme(axis.text.x = element_text(angle = 90, hjust = 1))

# num3_df |>
#   filter(date=="2015-01-01") |>
#   count(firstpresentation) |>
 # mutate()



```

```{r, eval=FALSE}
library(dplyr)

# using the original df with everything (data) or the df from before?
# create the date variable and get only names in freq_firstname

# this is using the df from before (freq_firstName); maybe not supposed to use df from before
num3_df <- data |>
  select(Month, Year, firstAuthorF) |>
  mutate(date = paste(Month, Year, sep="-")) |>
  mutate(date = as.Date(paste(Year, Month, "01", sep = "-"))) |>
  mutate(firstAuthorRem=gsub("(?<=\\s)[A-Z](\\.|\\s)?\\b|\\s\\w+$", "", firstAuthorF, perl = TRUE)) |>
  select(firstAuthorRem, date) |> # did not select firstAuthorF, 
  filter(firstAuthorRem %in% freq_firstName$firstAuthorRem) |>
  # filter(date >= as.Date("2015-01-01")) |>
  arrange(date) |>
  group_by(firstAuthorRem) |>
  distinct(firstAuthorRem, date, .keep_all = TRUE) |>
  mutate(firstpresentation = !duplicated(firstAuthorRem)) |>
  ungroup() |>
  filter(date=="2015-01-01")# Within each group (author), it checks whether it's the first appearance (not duplicated).
  # mutate(firstAuthorRem=str_trim(firstAuthorRem)) |>
  # filter(!is.na(firstAuthorRem)) |>
  # select(date, firstAuthorRem)

ggplot(num3_df, aes(x = as.factor(date), fill=firstpresentation)) +
  geom_bar(position="fill") +
  theme(axis.text.x = element_text(angle = 90, hjust = 1))


# using the df from before
# create new col that counts n for all names
new_firstName<-data |>
  select(Month, Year, firstAuthorF) |>
  mutate(date = paste(Month, Year, sep="-")) |>
  mutate(date = as.Date(paste(Year, Month, "01", sep = "-"))) |>
  mutate(firstAuthorRem=gsub("(?<=\\s)[A-Z](\\.|\\s)?\\b|\\s\\w+$", "", firstAuthorF, perl = TRUE)) |>
  mutate(firstAuthorRem=str_trim(firstAuthorRem)) |> # removes leading and trailing spaces
  count(firstAuthorRem) |>
  filter(n>30 & !is.na(firstAuthorRem)) |>
  select(date, firstAuhorRem)


# firstPresentation is boolean value that marks true for first instance of 
# name or false if the name has been shown before
# for example, if the first month authors are (Albert, Ben, Carl, David), firstPresentation is true for all of them
# but if the second month authors are (Albert, Ben, Ed, Frank) then half will be TRUE (Ed and Frank are new) and half will be FALSE (Albert and Ben are old)

df_2 <- data |>
  select(Month, Year, numAuthor) |>
  group_by(Year, Month) |>
  count(numAuthor > 2) |>
  mutate(`Month-Year` = paste(Month, Year, sep="-")) # make a new month-year variable

# converting to date format
df_2$`Month-Year` <- as.Date(paste(df_2$Year, df_2$Month, "01", sep = "-"))
```

4. Create an author level data frame (ie, one row per author) that tracks the number publications they have in NEJM and average number of months between publications. (-1 if they have only one publication)

Q: Do we calculate average num of months even for authors that only have 2 publications? I still calculated the mean here (for these authors, ave_num_months, num of months btn pubs/1)

```{r}
# data |>
#   select(firstAuthorF, firstAuthorL, firstAuthorI, Title, Month, Year) |>
#   mutate(date = paste(Month, Year, sep="-")) |>
#   mutate(date = as.Date(paste(Year, Month, "01", sep = "-"))) |>
#   group_by(firstAuthorF, firstAuthorL) |>
#   count(Title) |>
#   print(n=50)

#num_pubs gives number of publications for each author
num_pubs <-data |>
  select(firstAuthorF, firstAuthorL, firstAuthorI, Title, Month, Year) |>
  mutate(date = paste(Month, Year, sep="-")) |>
  mutate(date = as.Date(paste(Year, Month, "01", sep = "-"))) |>
  group_by(firstAuthorF, firstAuthorL) |>
  summarize(num_pub = n())

# working on this, dates is df of publications and dates organized/grouped by author
dates<-data |>
  select(firstAuthorF, firstAuthorL, firstAuthorI, Title, Month, Year) |>
  mutate(date = paste(Month, Year, sep="-")) |>
  mutate(date = as.Date(paste(Year, Month, "01", sep = "-"))) |>
  arrange(date) |>
  group_by(firstAuthorF, firstAuthorL) |>
  arrange(firstAuthorF, firstAuthorL)
 

# # summary table of average num of months in between publications
# dates |>
#   filter(firstAuthorL=="Makkar") |>
#   mutate(time_diff = date - lag(date)) |>
#   mutate(diff_month = as.numeric(round(time_diff/30.44))) |> # round to nearest month
#  # filter(!is.na(diff_month)) |>
#   summarize(ave_num_months = mean(diff_month, na.rm=TRUE))

# if one pub, ave_num_months=-1
# checked Eric J Velazquez (2 publications), Eric J Rubin (many)
summary_ave_months<-dates |>
 # filter(firstAuthorF=="Shantel") |>
 # arrange(date) |>
  mutate(time_diff = date - lag(date)) |>
  mutate(diff_month = as.numeric(round(time_diff/30.44))) |> # round to nearest month
  summarize(ave_num_months = mean(diff_month, na.rm=TRUE),
            ave_num_months = ifelse(is.nan(ave_num_months), -1, ave_num_months)) 


# join num_pubs and summary_ave_months dfs by author's full name

author_df <- num_pubs |>
  full_join(summary_ave_months, by=c("firstAuthorF", "firstAuthorL"))

author_df |>
  print(n=50)

# graphite
# navy denim
# teal
# black cuorduroy 22.9
```

5. How can you use the dataset to summarize what are the leading institutions that publish in NEJM

The email addresses contain the institution name--I would extract the institutional domain (all characters after "@"). I would filter through the domains and drop rows with emails ending in .com or .net as emails that don't have this ending are from institutions. Assuming the df doesn't contain duplicate publications, I would then group the df by domain name and use summarize to count the occurrences of each domain to find the most common institutions. I would then arrange the df by num of occurrenes of domain in descending order so that the leading institutions are at the top.